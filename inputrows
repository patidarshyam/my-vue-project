<template>
  <div class="table-container">
    <div class="table-responsive">
      <table class="table table-bordered table-striped">
        <thead>
          <tr>
            <th>Cost Center</th>
            <th>Job Title</th>
            <th>Type</th>
            <th>Description</th>
            <th>Effective Date</th>
            <th>Expiration Date</th>
            <th>Action</th>
          </tr>
        </thead>
        <tbody>
          <tr v-for="(employee, rowIndex) in filteredEmployees" :key="employee.employeeNumber">
            <td>
              <input v-model="employee.costCenterCode" class="form-control form-control-sm" />
            </td>
            <td>
              <input v-model="employee.jobTitle" class="form-control form-control-sm" />
            </td>
            <td>
              <input v-model="employee.type" class="form-control form-control-sm" />
            </td>
            <td>
              <input v-model="employee.description" class="form-control form-control-sm" />
            </td>
            <td>
              <Datepicker v-model="employeeAdmin.effectiveDate" class="form-control form-control-sm" />
            </td>
 <td>
              <el-date-picker v-model="employee.effectiveDate" type="date" :picker-options="datePickerOptions" />
            </td>
            <td>
              <v-date-picker
                v-model="employee.expirationDate"
                is-inline
                :attributes="datePickerOptions"
                @update:modelValue="onDatePickerUpdate(employee, 'expirationDate')"
              ></v-date-picker>
            </td>
            <td>
              <input v-model="employee.expirationDate" class="form-control form-control-sm" />
            </td>
            <td>
              <template v-if="employee.editing">
                <button @click="saveEmployee(employee)">Save</button>
                <button @click="cancelEdit(employee)">Cancel</button>
              </template>
              <template v-else>
                <button @click="editEmployee(employee)">Edit</button>
              </template>
            </td>
          </tr>
        </tbody>
      </table>
    </div>
  </div>
</template>

<script>

import Datepicker from 'vue-datepicker';
import { DatePicker } from 'element-ui';
import 'element-ui/lib/theme-chalk/index.css'; // Import the Element UI styles

import { ref } from 'vue';
import { DatePicker as VDatePicker } from 'v-calendar';

export default {
  props: {
    // ... Other props ...
  },
components: {
    //Datepicker,
[DatePicker.name]: DatePicker,
  VDatePicker,
  },
  data() {
    return {
datePickerOptions: {
        format: 'yyyy-MM-dd', // Set the date format to 'yyyy-MM-dd'
      },
      // ... Other data ...
    };
  },
  methods: {
onDatePickerUpdate(employee, field) {
      // Handler for v-calendar date picker updates
      // Update the employee's "effectiveDate" field with the selected date
      employee.effectiveDate = this.$refs.calendar.internalModel[0].value;
    },
    editEmployee(employee) {
      employee.editing = true; // Set the editing flag to true to show input fields
    },
    saveEmployee(employee) {
      // API call to save the updated data for the employee
      // Replace the below setTimeout with your actual API call
      setTimeout(() => {
        alert('API call to save data:\n' + JSON.stringify(employee));
        employee.editing = false; // Set the editing flag to false after saving
      }, 500);

 saveData() {
    // Create an array to store the employee data in 'employeedto' format
    const employeeDataToUpdate = [];

    // Map each employee object to the 'employeedto' format and add to the array
    for (const employee of this.employees) {
      const employeedto = {
        employeeNumber: employee.employeeNumber,
        costCenterCode: employee.costCenterCode,
        jobTitle: employee.jobTitle,
        type: employee.type,
        description: employee.description,
          effectiveDate: new Date(employee.effectiveDate).toLocaleDateString('en-CA'),
          expirationDate: new Date(employee.expirationDate).toLocaleDateString('en-CA'),
        // Add any other properties if needed
      };

      employeeDataToUpdate.push(employeedto);
    }
    },
    cancelEdit(employee) {
      // Set the editing flag to false to cancel the edit and revert back to display mode
      employee.editing = false;
    },
  },
};
</script>

<style scoped>
/* ... Your existing CSS styles ... */
</style>
