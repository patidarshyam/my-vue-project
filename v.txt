<template>
  <div class="card">
    <div class="card-header">
      <button class="accordion-toggle" type="button" data-bs-toggle="collapse" data-bs-target="#collapseOne"
        aria-expanded="true" aria-controls="collapseOne">
        Hierarchy
        <i class="bi bi-chevron-up"></i>
      </button>
    </div>

    <div id="collapseOne" class="collapse show" aria-labelledby="headingOne" data-bs-parent="#accordionExample">
      <div class="card-body">
        <div class="row">
          <div class="col-md-6">
            <div class="form-floating">
              <input id="domain" :value="employeeDetails.domain" disabled class="form-control form-control-sm">
              <label for="domain">Domain</label>
            </div>
            <div class="form-floating">
              <input id="group" :value="employeeDetails.group" disabled class="form-control form-control-sm">
              <label for="group">Group</label>
            </div>
            <div class="form-floating">
              <input id="division" :value="employeeDetails.division" disabled class="form-control form-control-sm">
              <label for="division">Division</label>
            </div>
            <div class="form-floating">
              <input id="area" :value="employeeDetails.area" disabled class="form-control form-control-sm">
              <label for="area">Area</label>
            </div>
            <div class="form-floating">
              <input id="type" :value="employeeDetails.type" disabled class="form-control form-control-sm">
              <label for="type">Type</label>
            </div>
            <div class="form-floating">
              <input id="category" :value="employeeDetails.category" disabled class="form-control form-control-sm">
              <label for="category">Category</label>
            </div>
          </div>
          <div class="col-md-6">
            <div class="form-floating">
              <input id="district" :value="employeeDetails.district" disabled class="form-control form-control-sm">
              <label for="district">District</label>
            </div>
            <div class="form-floating">
              <input id="citySalesManager" :value="employeeDetails.citySalesManager" disabled
                class="form-control form-control-sm">
              <label for="citySalesManager">City Sales Manager</label>
            </div>
            <div class="form-floating">
              <input id="zone" :value="employeeDetails.zone" disabled class="form-control form-control-sm">
              <label for="zone">Zone</label>
            </div>
            <div class="form-floating">
              <input id="specialRoles" :value="employeeDetails.specialRoles" disabled
                class="form-control form-control-sm">
              <label for="specialRoles">Special Roles</label>
            </div>
            <div class="form-floating">
              <input id="status" :value="employeeDetails.status" disabled class="form-control form-control-sm">
              <label for="status">Status</label>
            </div>
          </div>
        </div>
      </div>
    </div>
  </div>


  <div class="accordion" id="accordionExample">
    <!-- Table 1 -->
    <div class="card">
      <div class="card-header" id="tableOneHeading">
        <h5 class="mb-0">
          <button class="accordion-button" type="button" data-bs-toggle="collapse" data-bs-target="#collapseTableOne"
            aria-expanded="true" aria-controls="collapseTableOne">
            <i class="bi bi-chevron-up"></i>
            Employees
          </button>
        </h5>
      </div>

      <div id="collapseTableOne" class="collapse show" aria-labelledby="tableOneHeading"
        data-bs-parent="#accordionExample">
        <div class="card-body">
          <!-- Table 1 content here -->
          <div class="table-container mt-4">
            <div class="table-responsive">
              <table class="table table-bordered table-striped">
                <thead>
                  <tr>
                    <th>Employee Number</th>
                    <th>Employee Name</th>
                    <th>First Name</th>
                    <th>Last Name</th>
                    <th>Effective Date</th>
                    <th>Expiration Date</th>
                    <th>Emp Payroll Status</th>
                    <th>Job Title</th>
                  </tr>
                </thead>
                <tbody>
                  <tr v-for="employee in filteredEmployees" :key="employee.employeeNumber"
                    @click="openEmployeeSearchPopup(employee)">
                    <td>{{ employee.employeeNumber }}</td>
                    <td>{{ employee.employeeName }}</td>
                    <td>{{ employee.firstName }}</td>
                    <td>{{ employee.lastName }}</td>
                    <td>{{ employee.effectiveDate }}</td>
                    <td>{{ employee.expirationDate }}</td>
                    <td>{{ employee.empPayrollStatus }}</td>
                    <td>{{ employee.jobTitle }}</td>
                  </tr>
                </tbody>
              </table>
            </div>
            <nav v-if="totalPages > 1" class="mt-3">
              <div class="pagination-details" style="float: right;">
                Page {{ currentPage }} of {{ totalPages }} ({{ totalItems }} items)
              </div>
              <div style="float: left;">
                <ul class="pagination pagination-sm justify-content-center">
                  <li class="page-item" :class="{ 'disabled': currentPage === 1 }">
                    <a class="page-link" href="#" @click="prevPage">
                      Previous
                    </a>
                  </li>
                  <li v-for="page in visiblePages" :key="page" class="page-item"
                    :class="{ 'active': currentPage === page }">
                    <a class="page-link" href="#" @click="gotoPage(page)">{{ page }}</a>
                  </li>
                  <li class="page-item" :class="{ 'disabled': currentPage === totalPages }">
                    <a class="page-link" href="#" @click="nextPage">
                      Next
                    </a>
                  </li>
                </ul>
              </div>

            </nav>
          </div>
        </div>
      </div>
    </div>

    <!-- Table 2 -->
    <div class="card">
      <div class="card-header" id="tableTwoHeading">
        <h5 class="mb-0">
          <button class="accordion-button collapsed" type="button" data-bs-toggle="collapse"
            data-bs-target="#collapseTableTwo" aria-expanded="false" aria-controls="collapseTableTwo">
            <i class="bi bi-chevron-up"></i>
            Admin Override Employees
          </button>
        </h5>
      </div>

      <div id="collapseTableTwo" class="collapse" aria-labelledby="tableTwoHeading" data-bs-parent="#accordionExample">
        <div class="card-body">
          <!-- Table 2 content here -->
          <div class="table-container mt-4">
            <div class="table-responsive">
              <table class="table table-bordered table-striped">
                <thead>
                  <tr>
                    <th>Employee Number</th>
                    <th>First Name</th>
                    <th>Last Name</th>
                    <th>Effective Date</th>
                    <th>Cost Center Code</th>
                    <th>Job Title</th>
                  </tr>
                </thead>
                <tbody>
                  <tr v-for="employeeAdmin in filteredAdminEmployees" :key="employeeAdmin.employeeNumber">
                    <td>{{ employeeAdmin.employeeNumber }}</td>
                    <td>{{ employeeAdmin.employeeFirstName }}</td>
                    <td>{{ employeeAdmin.employeeLastName }}</td>
                    <td>{{ employeeAdmin.effectiveDate }}</td>
                    <td>{{ employeeAdmin.adminCostCenterCode }}</td>
                    <td>{{ employeeAdmin.jobTitle }}</td>
                  </tr>
                </tbody>
              </table>
            </div>
            <nav v-if="totalAPages > 1" class="mt-3">
              <div class="pagination-details" style="float: left;">
                Page {{ currentAPage }} of {{ totalAPages }} ({{ totalAItems }} items)
              </div>
              <div style="float: left;">
                <ul class="pagination pagination-sm justify-content-center">
                  <li class="Page-item" :class="{ 'disabled': currentAPage === 1 }">
                    <a class="Page-link" href="#" @click="prevAPage">
                      Previous
                    </a>
                  </li>
                  <li v-for="Page in visibleAPages" :key="Page" class="Page-item"
                    :class="{ 'active': currentAPage === Page }">
                    <a class="Page-link" href="#" @click="gotoAPage(Page)">{{ Page }}</a>
                  </li>
                  <li class="Page-item" :class="{ 'disabled': currentAPage === totalAPages }">
                    <a class="Page-link" href="#" @click="nextAPage">
                      Next
                    </a>
                  </li>
                </ul>
              </div>
            </nav>
          </div>
        </div>
      </div>
    </div>
  </div>

  <!-- <popup-modal :visible="modalVisible" :rowData="selectedRowData" /> -->
  <popup-modal :visible="modalVisible" :rowData="selectedRowData" @close="modalVisible = false" />
</template>


<script>
import { employees } from './employee.js';
import { employeeDetails } from './employee-details.js';
import PopupModal from './PopupModal.vue';

export default {
  components: {
    PopupModal,
  },
  data() {
    return {
      showModal: false,
      modalVisible: false,
      searchCriteria: {
        lastName: '',
        firstName: '',
        employeeNumber: ''
      },
      employeeDetails: {},
      employees: [],
      currentPage: 1,
      itemsPerPage: 2,
      dropdownOptions: { "name1": "country1", "name2": "country2" }, // Array to store the dropdown options
      selectedOption: null, // Data property to store the selected option
    };
  },
  mounted() {
    this.fetchEmployeeDetails();
    this.fetchEmployees();
    this.fetchDropdownOptions();
  },
  computed: {
    filteredEmployees() {
      const startIndex = (this.currentPage - 1) * this.itemsPerPage;
      const endIndex = startIndex + this.itemsPerPage;
      return this.employees.slice(startIndex, endIndex);
    },
    totalItems() {
      return this.employees.length;
    },
    totalPages() {
      return Math.ceil(this.totalItems / this.itemsPerPage);
    },
    visiblePages() {
      const totalVisiblePages = 5;
      const halfVisiblePages = Math.floor(totalVisiblePages / 2);
      let startPage = this.currentPage - halfVisiblePages;
      if (startPage < 1) {
        startPage = 1;
      }
      let endPage = startPage + totalVisiblePages - 1;
      if (endPage > this.totalPages) {
        endPage = this.totalPages;
      }
      const visiblePages = [];
      for (let page = startPage; page <= endPage; page++) {
        visiblePages.push(page);
      }
      return visiblePages;
    }
  },
  methods: {
    openEmployeeSearchPopup(employee) {

      this.selectedRowData = employee;
      this.modalVisible = true;
    },
    async fetchDropdownOptions() {
      try {
        //const response = await axios.get('your_api_endpoint'); // Replace 'your_api_endpoint' with the actual API endpoint URL
        //this.dropdownOptions = Object.values(response.data); // Assuming the API response is an object with key-value pairs
      } catch (error) {
        console.error('Error fetching dropdown options:', error);
      }
    },
    fetchEmployees() {
      // Replace the URL with the actual API endpoint to fetch employee data
      this.employees = employees;
    },
    fetchEmployeeDetails() {
      // Replace the URL with the actual API endpoint to fetch employee details
      this.employeeDetails = employeeDetails;
    },
    gotoPage(page) {
      if (page >= 1 && page <= this.totalPages) {
        this.currentPage = page;
      }
    },
    prevPage() {
      if (this.currentPage > 1) {
        this.currentPage--;
      }
    },
    nextPage() {
      if (this.currentPage < this.totalPages) {
        this.currentPage++;
      }
    },

  }
};
</script>

<style scoped>
.table-container {
  margin-top: 20px;
}

.pagination-details {
  font-size: 14px;
  margin-top: 10px;
}

.card-header {
  background-color: #f8f9fa;
  border-bottom: none;
}

.card-title {
  margin-bottom: 0;
}

.card-body {
  padding: 1.5rem;
}

.form-group {
  margin-bottom: 1.5rem;
}

.form-group.row {
  align-items: center;
}

.col-form-label {
  white-space: nowrap;
  font-weight: bold;
}

.text-right {
  text-align: right;
}

.table-bordered th,
.table-bordered td {
  border: 1px solid #dee2e6;
}

.table-striped tbody tr:nth-of-type(odd) {
  background-color: #f9f9f9;
}

.pagination {
  justify-content: center;
}

.pagination .page-item.disabled .page-link,
.pagination .page-item.active .page-link {
  color: #fff;
  background-color: #007bff;
  border-color: #007bff;
}

.pagination .page-link {
  color: #007bff;
  background-color: #fff;
  border: 1px solid #dee2e6;
  border-radius: 0.25rem;
  transition: all 0.3s;
}

.pagination .page-link:hover {
  color: #fff;
  background-color: #007bff;
  border-color: #007bff;
}
</style>
