<template>
  <div>
    <div class="card">
      <div class="card-header">
        <h5 class="card-title">Employee Details</h5>
      </div>
      <div class="card-body">
        <div class="row">
          <div class="col-md-6">
            <div v-for="(value, label) in employeeDetails" :key="label" class="form-group">
              <label :for="label">{{ label }}:</label>
              <input :id="label" :value="value" disabled class="form-control">
            </div>
          </div>
        </div>
      </div>
    </div>
       
    <div class="table-container">
      <div class="d-flex justify-content-between align-items-center mb-2">
        <div class="row">
          <div class="col-md-4">
            <h4>Employees</h4>
          </div>
          <div class="col-md-4">
            <div class="input-group">
              <input v-model="searchText" placeholder="Search" class="form-control form-control-sm">
            </div>
          </div>
          <div class="col-md-4">
            <div class="pagination-details">
              Page {{ currentPage }} of {{ totalPages }} ({{ totalItems }} items)
            </div>
          </div>
        </div>
      </div>
      <table class="table table-bordered">
        <thead>
          <tr>
            <th>Employee Number</th>
            <th>Employee Name</th>
            <th>Last Name</th>
            <th>First Name</th>
            <th>Effective Date</th>
            <th>Expiration Date</th>
            <th>Emp Payroll Status</th>
            <th>Job Title</th>
          </tr>
        </thead>
        <tbody>
          <tr v-for="employee in filteredEmployees" :key="employee.id">
            <td>{{ employee.employeeNumber }}</td>
            <td>{{ employee.employeeName }}</td>
            <td>{{ employee.lastName }}</td>
            <td>{{ employee.firstName }}</td>
            <td>{{ employee.effectiveDate }}</td>
            <td>{{ employee.expirationDate }}</td>
            <td>{{ employee.empPayrollStatus }}</td>
            <td>{{ employee.jobTitle }}</td>
          </tr>
        </tbody>
      </table>

      <nav v-if="totalPages > 1">
        <ul class="pagination justify-content-center">
          <li class="page-item" :class="{ disabled: currentPage === 1 }">
            <a class="page-link" href="#" @click="prevPage">Previous</a>
          </li>
          <li v-for="page in visiblePages" :key="page" class="page-item" :class="{ active: currentPage === page }">
            <a class="page-link" href="#" @click="gotoPage(page)">{{ page }}</a>
          </li>
          <li class="page-item" :class="{ disabled: currentPage === totalPages }">
            <a class="page-link" href="#" @click="nextPage">Next</a>
          </li>
        </ul>
      </nav>
    </div>
  </div>
</template>

<script>
import { employees } from './employee.js';
import { employeeDetails } from './employee-details.js';
export default {
  data() {
    return {
      employeeDetails: {},
      searchText: '',
      employees: [],
      currentPage: 1,
      itemsPerPage: 2
    };
  },
  mounted() {
    this.fetchEmployeeDetails();
    this.fetchEmployees();
  },
  computed: {
    filteredEmployees() {
      const startIndex = (this.currentPage - 1) * this.itemsPerPage;
      const endIndex = startIndex + this.itemsPerPage;
      return this.employees.slice(startIndex, endIndex);
    },
    totalItems() {
      return this.employees.length;
    },
    totalPages() {
      return Math.ceil(this.totalItems / this.itemsPerPage);
    },
    visiblePages() {
      const totalVisiblePages = 5;
      const halfVisiblePages = Math.floor(totalVisiblePages / 2);
      let startPage = this.currentPage - halfVisiblePages;
      if (startPage < 1) {
        startPage = 1;
      }
      let endPage = startPage + totalVisiblePages - 1;
      if (endPage > this.totalPages) {
        endPage = this.totalPages;
      }
      const visiblePages = [];
      for (let page = startPage; page <= endPage; page++) {
        visiblePages.push(page);
      }
      return visiblePages;
    }
  },
  methods: {
    fetchEmployees() {
      // Replace the URL with the actual API endpoint to fetch employee data
      //'api/employees'
      // fetch('api/employees.json')  // Replace 'path/to/employee-details.json' with the actual path to your JSON file
      //   .then(response => response.json())
      //   .then(data => {
      //     this.employees = data;
      //   })
      //   .catch(error => {
      //     console.error('Error:', error);
      //   });
      this.employees = employees;
    },
    fetchEmployeeDetails() {
      // Replace the URL with the actual API endpoint to fetch employee details
      // fetch('api/employee-details.json')
      //   .then(response => response.json())
      //   .then(data => {
      //     this.employeeDetails = data;
      //   })
      //   .catch(error => {
      //     console.error('Error:', error);
      //   });
        this.employeeDetails = employeeDetails;
    },
    gotoPage(page) {
      if (page >= 1 && page <= this.totalPages) {
        this.currentPage = page;
      }
    },
    prevPage() {
      if (this.currentPage > 1) {
        this.currentPage--;
      }
    },
    nextPage() {
      if (this.currentPage < this.totalPages) {
        this.currentPage++;
      }
    }
  }
};
</script>

<style>
/* Add your styles here */
.table-container {
  margin-top: 20px;
}

/* Add any additional styles as needed */
</style>
